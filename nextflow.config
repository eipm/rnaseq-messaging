manifest {
    homePage = 'https://github.com/eipm/rnaseq-messaging'
    defaultBranch = 'main'
    name = 'rnaseq-messaging'
    author = 'Kathryn Gorski'
}

params {
    # required parameters
    samplesheet = '/path/to/samplesheet'
    outputdir = '/path/to/output'

    star_index = '/path/to/star/index'
    ctat_lib = '/path/to/ctat_lib'
    salmon_index = '/path/to/salmon_index'

    pipeline_messaging_enabled = true
    dispatcherURL = 'http://your/dispatcher/url'

    # required parameters for azurebatch execution (-profile azurebatch)
    workdir = 'az://path/to/workdir' # in blob storage account

    active_directory_principal_id = null
    active_directory_principal_secret = null
    active_directory_tenant_id = null

    batch_location = null
    batch_account_name = null
    storage_account_name = null

    virtual_network = '/subscriptions/<value>/resourceGroups/<value>/providers/Microsoft.Network/virtualNetworks/<value>/subnets/<value>'

    # docker.io registry credentials
    registry_username = null
    registry_password = null
}

env {
    BASH_MESSAGING_ENABLED = "${params.pipeline_messaging_enabled}"
    DISPATCHER_URL = params.dispatcherURL
}

profiles {
    azurebatch {
        workDir = params.workdir
        process.executor = 'azurebatch'
        process.container = 'docker.io/petrpliska/ubuntu-with-curl:latest'
        azure {
            activeDirectory {
                servicePrincipalId = params.active_directory_principal_id
                servicePrincipalSecret = params.active_directory_principal_secret
                tenantId = params.active_directory_tenant_id
            }
            batch {
                location = params.batch_location
                accountName = params.batch_account_name

                autoPoolMode = true
                allowPoolCreation = true
                deletePoolsOnCompletion = true
                copyToolInstallMode = 'task'
                pools {
                    auto {
                        vmType = 'Standard_D2_v3'
                        vmCount = 3
                        virtualNetwork = params.virtual_network
                        privileged = true
                    }
                }
            }
            storage {
                accountName = params.storage_account_name
            }
            registry {
                server = 'docker.io'
                userName = params.registry_username
                password = params.registry_password
            }
        }
    }
}